// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.2
// source: service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RecsClient is the client API for Recs service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RecsClient interface {
	Publish(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Empty, error)
	CreateWorld(ctx context.Context, in *World, opts ...grpc.CallOption) (*Empty, error)
	DeleteWorld(ctx context.Context, in *World, opts ...grpc.CallOption) (*Empty, error)
	Create(ctx context.Context, in *CreateEntity, opts ...grpc.CallOption) (*Entity, error)
	Delete(ctx context.Context, in *DeleteEntity, opts ...grpc.CallOption) (*Empty, error)
	Set(ctx context.Context, in *SetComponent, opts ...grpc.CallOption) (*Empty, error)
	Remove(ctx context.Context, in *RemoveComponent, opts ...grpc.CallOption) (*Empty, error)
	Move(ctx context.Context, in *MoveEntity, opts ...grpc.CallOption) (*MoveEntityResponse, error)
	Get(ctx context.Context, in *GetEntity, opts ...grpc.CallOption) (Recs_GetClient, error)
}

type recsClient struct {
	cc grpc.ClientConnInterface
}

func NewRecsClient(cc grpc.ClientConnInterface) RecsClient {
	return &recsClient{cc}
}

func (c *recsClient) Publish(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Recs/Publish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recsClient) CreateWorld(ctx context.Context, in *World, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Recs/CreateWorld", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recsClient) DeleteWorld(ctx context.Context, in *World, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Recs/DeleteWorld", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recsClient) Create(ctx context.Context, in *CreateEntity, opts ...grpc.CallOption) (*Entity, error) {
	out := new(Entity)
	err := c.cc.Invoke(ctx, "/Recs/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recsClient) Delete(ctx context.Context, in *DeleteEntity, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Recs/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recsClient) Set(ctx context.Context, in *SetComponent, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Recs/Set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recsClient) Remove(ctx context.Context, in *RemoveComponent, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Recs/Remove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recsClient) Move(ctx context.Context, in *MoveEntity, opts ...grpc.CallOption) (*MoveEntityResponse, error) {
	out := new(MoveEntityResponse)
	err := c.cc.Invoke(ctx, "/Recs/Move", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recsClient) Get(ctx context.Context, in *GetEntity, opts ...grpc.CallOption) (Recs_GetClient, error) {
	stream, err := c.cc.NewStream(ctx, &Recs_ServiceDesc.Streams[0], "/Recs/Get", opts...)
	if err != nil {
		return nil, err
	}
	x := &recsGetClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Recs_GetClient interface {
	Recv() (*Component, error)
	grpc.ClientStream
}

type recsGetClient struct {
	grpc.ClientStream
}

func (x *recsGetClient) Recv() (*Component, error) {
	m := new(Component)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RecsServer is the server API for Recs service.
// All implementations must embed UnimplementedRecsServer
// for forward compatibility
type RecsServer interface {
	Publish(context.Context, *Event) (*Empty, error)
	CreateWorld(context.Context, *World) (*Empty, error)
	DeleteWorld(context.Context, *World) (*Empty, error)
	Create(context.Context, *CreateEntity) (*Entity, error)
	Delete(context.Context, *DeleteEntity) (*Empty, error)
	Set(context.Context, *SetComponent) (*Empty, error)
	Remove(context.Context, *RemoveComponent) (*Empty, error)
	Move(context.Context, *MoveEntity) (*MoveEntityResponse, error)
	Get(*GetEntity, Recs_GetServer) error
	mustEmbedUnimplementedRecsServer()
}

// UnimplementedRecsServer must be embedded to have forward compatible implementations.
type UnimplementedRecsServer struct {
}

func (UnimplementedRecsServer) Publish(context.Context, *Event) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (UnimplementedRecsServer) CreateWorld(context.Context, *World) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWorld not implemented")
}
func (UnimplementedRecsServer) DeleteWorld(context.Context, *World) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWorld not implemented")
}
func (UnimplementedRecsServer) Create(context.Context, *CreateEntity) (*Entity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedRecsServer) Delete(context.Context, *DeleteEntity) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedRecsServer) Set(context.Context, *SetComponent) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedRecsServer) Remove(context.Context, *RemoveComponent) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remove not implemented")
}
func (UnimplementedRecsServer) Move(context.Context, *MoveEntity) (*MoveEntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Move not implemented")
}
func (UnimplementedRecsServer) Get(*GetEntity, Recs_GetServer) error {
	return status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedRecsServer) mustEmbedUnimplementedRecsServer() {}

// UnsafeRecsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RecsServer will
// result in compilation errors.
type UnsafeRecsServer interface {
	mustEmbedUnimplementedRecsServer()
}

func RegisterRecsServer(s grpc.ServiceRegistrar, srv RecsServer) {
	s.RegisterService(&Recs_ServiceDesc, srv)
}

func _Recs_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecsServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Recs/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecsServer).Publish(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

func _Recs_CreateWorld_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(World)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecsServer).CreateWorld(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Recs/CreateWorld",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecsServer).CreateWorld(ctx, req.(*World))
	}
	return interceptor(ctx, in, info, handler)
}

func _Recs_DeleteWorld_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(World)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecsServer).DeleteWorld(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Recs/DeleteWorld",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecsServer).DeleteWorld(ctx, req.(*World))
	}
	return interceptor(ctx, in, info, handler)
}

func _Recs_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEntity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecsServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Recs/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecsServer).Create(ctx, req.(*CreateEntity))
	}
	return interceptor(ctx, in, info, handler)
}

func _Recs_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEntity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecsServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Recs/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecsServer).Delete(ctx, req.(*DeleteEntity))
	}
	return interceptor(ctx, in, info, handler)
}

func _Recs_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetComponent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecsServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Recs/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecsServer).Set(ctx, req.(*SetComponent))
	}
	return interceptor(ctx, in, info, handler)
}

func _Recs_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveComponent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecsServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Recs/Remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecsServer).Remove(ctx, req.(*RemoveComponent))
	}
	return interceptor(ctx, in, info, handler)
}

func _Recs_Move_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveEntity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecsServer).Move(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Recs/Move",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecsServer).Move(ctx, req.(*MoveEntity))
	}
	return interceptor(ctx, in, info, handler)
}

func _Recs_Get_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetEntity)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RecsServer).Get(m, &recsGetServer{stream})
}

type Recs_GetServer interface {
	Send(*Component) error
	grpc.ServerStream
}

type recsGetServer struct {
	grpc.ServerStream
}

func (x *recsGetServer) Send(m *Component) error {
	return x.ServerStream.SendMsg(m)
}

// Recs_ServiceDesc is the grpc.ServiceDesc for Recs service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Recs_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Recs",
	HandlerType: (*RecsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Publish",
			Handler:    _Recs_Publish_Handler,
		},
		{
			MethodName: "CreateWorld",
			Handler:    _Recs_CreateWorld_Handler,
		},
		{
			MethodName: "DeleteWorld",
			Handler:    _Recs_DeleteWorld_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _Recs_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Recs_Delete_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _Recs_Set_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _Recs_Remove_Handler,
		},
		{
			MethodName: "Move",
			Handler:    _Recs_Move_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Get",
			Handler:       _Recs_Get_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "service.proto",
}
